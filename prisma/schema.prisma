datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum PlanType {
  BASICO
  MEDIO
  SUPER
}

enum ContratedPlan {
  BASIC
  MEDIUM
  PLUS
}

enum Role {
  USER
  EMPLOYEE
  MANAGER
  ADMIN
}

model Sequenciais {
  id         Int @id @default(autoincrement())
  ano        Int @unique
  sequencial Int @default(1)
}

model Address {
  id           Int     @id @default(autoincrement())
  street       String  @db.VarChar(255)
  number       String  @db.VarChar(20)
  complement   String? @db.VarChar(255)
  neighborhood String  @db.VarChar(255)
  city         String  @db.VarChar(255)
  state        String  @db.VarChar(2)
  zipCode      String  @db.VarChar(8)

  user User? @relation
}

model LuckyNumber {
  id         Int     @id @default(autoincrement())
  number     String
  series     String?
  loteClient String?
  qnty       String?

  user User? @relation

  @@unique([number, series]) // Garantir que o número seja único dentro da série
}

model User {
  id             Int      @id @default(autoincrement())
  code           String   @unique @default(cuid())
  name           String   @db.VarChar(80)
  cpf            String   @unique @db.VarChar(11)
  gender         String   @db.VarChar(1)
  socialName     String?
  email          String   @unique @db.VarChar(255)
  hashedPassword String
  birthDate      DateTime @db.Date
  cel            String   @db.VarChar(20)
  role           Role     @default(USER)

  created DateTime @default(now())
  updated DateTime @updatedAt

  document_signed   Boolean        @default(false)
  payment_completed Boolean        @default(false)
  plan_selected     PlanType?
  contrated_plan    ContratedPlan?

  address   Address? @relation(fields: [addressId], references: [id])
  addressId Int?     @unique

  luckyNumberId Int?         @unique
  luckyNumber   LuckyNumber? @relation(fields: [luckyNumberId], references: [id])

  payments      Payment[] // Relaciona os pagamentos
  planChanges   PlanChange[] // Relaciona as alterações de plano
  cancellations Cancellation[] // Relaciona os cancelamentos
  adesao        Adesao?        @relation
  adesaoId      Int?           @unique // Certifique-se que este campo é único.

  generatedFiles   GeneratedFiles? @relation
  generatedFilesId Int?            @unique

  @@index([cpf])
}

model Payment {
  id          Int           @id @default(autoincrement())
  user        User          @relation(fields: [userId], references: [id])
  userId      Int
  amount      Decimal       @db.Decimal(10, 2) // Valor do pagamento
  dueDate     DateTime // Data de vencimento
  paymentDate DateTime? // Data de pagamento, caso concluído
  status      PaymentStatus @default(PENDING) // Status do pagamento
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
}

model Cancellation {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  reason    String   @db.VarChar(255) // Motivo do cancelamento
  createdAt DateTime @default(now())
}

model PlanChange {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  oldPlan   PlanType // Plano anterior
  newPlan   PlanType // Novo plano
  createdAt DateTime @default(now())
}

model Adesao {
  id           Int      @id @default(autoincrement())
  user         User     @relation(fields: [userId], references: [id])
  userId       Int      @unique
  actionType   Int   // TIPO DE AÇÃO
  productCode  String   @db.VarChar(4) // Código do produto
  contrated_plan String?
  plan_selected String? 
  document_signed Boolean?  @default(false)
  payment_completed Boolean?  @default(false)
 
 
}

model GeneratedFiles {
  id             Int      @id @default(autoincrement())
  fileType       FileType
  generationDate DateTime @default(now())
  sequenceNumber Int      @default(1)
  userId         Int?     @unique
  user           User?    @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
}

enum FileType {
  PAGAMENTO
  ADESAO
  CANCELAMENTO
  ALTERACAO
}
